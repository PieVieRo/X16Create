import raylib;

static Color x16ToColor(ubyte r, ubyte g, ubyte b) {
    return Color(cast(ubyte)(r*0x11), cast(ubyte)(g*0x11), cast(ubyte)(b*0x11), 0xFF);
}

public alias Palette = Color[256];

static public Palette default_palette = [
    // ROW 1
    x16ToColor(0x0, 0x0, 0x0), x16ToColor(0xF, 0xF, 0xF), x16ToColor(0x0, 0x0, 0x8), x16ToColor(0xF, 0xE, 0xA), x16ToColor(0x4, 0xC, 0xC), x16ToColor(0xC, 0x5, 0x0), x16ToColor(0x0, 0xA, 0x0), x16ToColor(0xE, 0x7, 0xE), x16ToColor(0x8, 0x5, 0xD), x16ToColor(0x4, 0x0, 0x6), x16ToColor(0x7, 0x7, 0xF), x16ToColor(0x3, 0x3, 0x3), x16ToColor(0x7, 0x7, 0x7), x16ToColor(0xF, 0x6, 0xA), x16ToColor(0x8, 0xF, 0x0), x16ToColor(0xB, 0xB, 0xB),
    // ROW 2
    x16ToColor(0x0, 0x0, 0x0), x16ToColor(0x1, 0x1, 0x1), x16ToColor(0x2, 0x2, 0x2), x16ToColor(0x3, 0x3, 0x3), x16ToColor(0x4, 0x4, 0x4), x16ToColor(0x5, 0x5, 0x5), x16ToColor(0x6, 0x6, 0x6), x16ToColor(0x7, 0x7, 0x7), x16ToColor(0x8, 0x8, 0x8), x16ToColor(0x9, 0x9, 0x9), x16ToColor(0xA, 0xA, 0xA), x16ToColor(0xB, 0xB, 0xB), x16ToColor(0xC, 0xC, 0xC), x16ToColor(0xD, 0xD, 0xD), x16ToColor(0xE, 0xE, 0xE), x16ToColor(0xF, 0xF, 0xF),
    // ROW 3
    x16ToColor(0x1, 0x1, 0x2), x16ToColor(0x3, 0x3, 0x4), x16ToColor(0x4, 0x4, 0x6), x16ToColor(0x6, 0x6, 0x8), x16ToColor(0x8, 0x8, 0xA), x16ToColor(0x9, 0x9, 0xC), x16ToColor(0xB, 0xB, 0xF), x16ToColor(0x1, 0x1, 0x2), x16ToColor(0x2, 0x2, 0x4), x16ToColor(0x3, 0x3, 0x6), x16ToColor(0x4, 0x4, 0x8), x16ToColor(0x5, 0x5, 0xA), x16ToColor(0x6, 0x6, 0xC), x16ToColor(0x7, 0x7, 0xF), x16ToColor(0x0, 0x0, 0x2), x16ToColor(0x1, 0x1, 0x4),
    // ROW 4
    x16ToColor(0x1, 0x1, 0x6), x16ToColor(0x2, 0x2, 0x8), x16ToColor(0x2, 0x2, 0xA), x16ToColor(0x3, 0x3, 0xC), x16ToColor(0x3, 0x3, 0xF), x16ToColor(0x0, 0x0, 0x2), x16ToColor(0x0, 0x0, 0x4), x16ToColor(0x0, 0x0, 0x6), x16ToColor(0x0, 0x0, 0x8), x16ToColor(0x0, 0x0, 0xA), x16ToColor(0x0, 0x0, 0xC), x16ToColor(0x0, 0x0, 0xF), x16ToColor(0x2, 0x1, 0x2), x16ToColor(0x4, 0x3, 0x4), x16ToColor(0x6, 0x4, 0x6), x16ToColor(0x8, 0x6, 0x8),
    // ROW 5
    x16ToColor(0xA, 0x8, 0xA), x16ToColor(0xC, 0x9, 0xC), x16ToColor(0xE, 0xB, 0xF), x16ToColor(0x1, 0x1, 0x2), x16ToColor(0x3, 0x2, 0x4), x16ToColor(0x5, 0x3, 0x6), x16ToColor(0x7, 0x4, 0x8), x16ToColor(0x9, 0x5, 0xA), x16ToColor(0xB, 0x6, 0xC), x16ToColor(0xD, 0x7, 0xF), x16ToColor(0x1, 0x0, 0x2), x16ToColor(0x3, 0x1, 0x4), x16ToColor(0x5, 0x1, 0x6), x16ToColor(0x6, 0x2, 0x8), x16ToColor(0x8, 0x2, 0xA), x16ToColor(0xA, 0x3, 0xC),
    // ROW 6
    x16ToColor(0xC, 0x3, 0xF), x16ToColor(0x1, 0x0, 0x2), x16ToColor(0x3, 0x0, 0x4), x16ToColor(0x4, 0x0, 0x6), x16ToColor(0x6, 0x0, 0x8), x16ToColor(0x8, 0x0, 0xA), x16ToColor(0x9, 0x0, 0xC), x16ToColor(0xB, 0x0, 0xF), x16ToColor(0x2, 0x1, 0x1), x16ToColor(0x4, 0x3, 0x3), x16ToColor(0x6, 0x4, 0x5), x16ToColor(0x8, 0x6, 0x7), x16ToColor(0xA, 0x8, 0x9), x16ToColor(0xC, 0x9, 0xB), x16ToColor(0xF, 0xB, 0xD), x16ToColor(0x2, 0x1, 0x1),
    // ROW 7
    x16ToColor(0x4, 0x2, 0x3), x16ToColor(0x6, 0x3, 0x4), x16ToColor(0x8, 0x4, 0x6), x16ToColor(0xA, 0x5, 0x8), x16ToColor(0xC, 0x6, 0x9), x16ToColor(0xF, 0x7, 0xB), x16ToColor(0x2, 0x0, 0x1), x16ToColor(0x4, 0x1, 0x2), x16ToColor(0x6, 0x1, 0x4), x16ToColor(0x8, 0x2, 0x5), x16ToColor(0xA, 0x2, 0x6), x16ToColor(0xC, 0x3, 0x8), x16ToColor(0xF, 0x3, 0x9), x16ToColor(0x2, 0x0, 0x1), x16ToColor(0x4, 0x0, 0x2), x16ToColor(0x6, 0x0, 0x3),
    // ROW 8
    x16ToColor(0x8, 0x0, 0x4), x16ToColor(0xA, 0x0, 0x5), x16ToColor(0xC, 0x0, 0x6), x16ToColor(0xF, 0x0, 0x7), x16ToColor(0x2, 0x1, 0x1), x16ToColor(0x4, 0x3, 0x3), x16ToColor(0x6, 0x5, 0x4), x16ToColor(0x8, 0x6, 0x6), x16ToColor(0xA, 0x8, 0x8), x16ToColor(0xC, 0xA, 0x9), x16ToColor(0xF, 0xC, 0xB), x16ToColor(0x2, 0x1, 0x1), x16ToColor(0x4, 0x2, 0x2), x16ToColor(0x6, 0x4, 0x3), x16ToColor(0x8, 0x5, 0x4), x16ToColor(0xA, 0x6, 0x5),
    // ROW 9
    x16ToColor(0xC, 0x8, 0x6), x16ToColor(0xF, 0x9, 0x7), x16ToColor(0x2, 0x0, 0x0), x16ToColor(0x4, 0x1, 0x1), x16ToColor(0x6, 0x2, 0x1), x16ToColor(0x8, 0x3, 0x2), x16ToColor(0xA, 0x4, 0x2), x16ToColor(0xC, 0x5, 0x3), x16ToColor(0xF, 0x6, 0x3), x16ToColor(0x2, 0x0, 0x0), x16ToColor(0x4, 0x1, 0x0), x16ToColor(0x6, 0x1, 0x0), x16ToColor(0x8, 0x2, 0x0), x16ToColor(0xA, 0x2, 0x0), x16ToColor(0xC, 0x3, 0x0), x16ToColor(0xF, 0x3, 0x0),
    // ROW 10
    x16ToColor(0x2, 0x2, 0x1), x16ToColor(0x4, 0x4, 0x3), x16ToColor(0x6, 0x6, 0x4), x16ToColor(0x8, 0x8, 0x6), x16ToColor(0xA, 0xA, 0x8), x16ToColor(0xC, 0xC, 0x9), x16ToColor(0xF, 0xF, 0xB), x16ToColor(0x2, 0x2, 0x1), x16ToColor(0x4, 0x4, 0x2), x16ToColor(0x6, 0x6, 0x3), x16ToColor(0x8, 0x8, 0x4), x16ToColor(0xA, 0xA, 0x5), x16ToColor(0xC, 0xC, 0x6), x16ToColor(0xF, 0xF, 0x7), x16ToColor(0x2, 0x2, 0x0), x16ToColor(0x4, 0x4, 0x1),
    // ROW 11
    x16ToColor(0x6, 0x6, 0x1), x16ToColor(0x8, 0x8, 0x2), x16ToColor(0xA, 0xA, 0x2), x16ToColor(0xC, 0xC, 0x3), x16ToColor(0xF, 0xF, 0x3), x16ToColor(0x2, 0x2, 0x0), x16ToColor(0x4, 0x4, 0x0), x16ToColor(0x6, 0x6, 0x0), x16ToColor(0x8, 0x8, 0x0), x16ToColor(0xA, 0xA, 0x0), x16ToColor(0xC, 0xC, 0x0), x16ToColor(0xF, 0xF, 0x0), x16ToColor(0x1, 0x2, 0x1), x16ToColor(0x3, 0x4, 0x3), x16ToColor(0x5, 0x6, 0x4), x16ToColor(0x6, 0x8, 0x6),
    // ROW 12
    x16ToColor(0x8, 0xA, 0x8), x16ToColor(0xA, 0xC, 0x9), x16ToColor(0xC, 0xF, 0xB), x16ToColor(0x1, 0x2, 0x1), x16ToColor(0x2, 0x4, 0x2), x16ToColor(0x4, 0x6, 0x3), x16ToColor(0x5, 0x8, 0x4), x16ToColor(0x6, 0xA, 0x5), x16ToColor(0x8, 0xC, 0x6), x16ToColor(0x9, 0xF, 0x7), x16ToColor(0x0, 0x2, 0x0), x16ToColor(0x1, 0x4, 0x1), x16ToColor(0x2, 0x6, 0x1), x16ToColor(0x3, 0x8, 0x2), x16ToColor(0x4, 0xA, 0x2), x16ToColor(0x5, 0xC, 0x3),
    // ROW 13
    x16ToColor(0x6, 0xF, 0x3), x16ToColor(0x0, 0x2, 0x0), x16ToColor(0x1, 0x4, 0x0), x16ToColor(0x1, 0x6, 0x0), x16ToColor(0x2, 0x8, 0x0), x16ToColor(0x2, 0xA, 0x0), x16ToColor(0x3, 0xC, 0x0), x16ToColor(0x3, 0xF, 0x0), x16ToColor(0x1, 0x2, 0x1), x16ToColor(0x3, 0x4, 0x3), x16ToColor(0x4, 0x6, 0x5), x16ToColor(0x6, 0x8, 0x7), x16ToColor(0x8, 0xA, 0x9), x16ToColor(0x9, 0xC, 0xB), x16ToColor(0xB, 0xF, 0xD), x16ToColor(0x1, 0x2, 0x1),
    // ROW 14
    x16ToColor(0x2, 0x4, 0x3), x16ToColor(0x3, 0x6, 0x4), x16ToColor(0x4, 0x8, 0x6), x16ToColor(0x5, 0xA, 0x8), x16ToColor(0x6, 0xC, 0x9), x16ToColor(0x7, 0xF, 0xB), x16ToColor(0x0, 0x2, 0x1), x16ToColor(0x1, 0x4, 0x2), x16ToColor(0x1, 0x6, 0x4), x16ToColor(0x2, 0x8, 0x5), x16ToColor(0x2, 0xA, 0x6), x16ToColor(0x3, 0xC, 0x8), x16ToColor(0x3, 0xF, 0x9), x16ToColor(0x0, 0x2, 0x1), x16ToColor(0x0, 0x4, 0x2), x16ToColor(0x0, 0x6, 0x3),
    // ROW 15
    x16ToColor(0x0, 0x8, 0x4), x16ToColor(0x0, 0xA, 0x5), x16ToColor(0x0, 0xC, 0x6), x16ToColor(0x0, 0xF, 0x7), x16ToColor(0x1, 0x2, 0x2), x16ToColor(0x3, 0x4, 0x4), x16ToColor(0x4, 0x6, 0x6), x16ToColor(0x6, 0x8, 0x8), x16ToColor(0x8, 0xA, 0xA), x16ToColor(0x9, 0xC, 0xC), x16ToColor(0xB, 0xE, 0xF), x16ToColor(0x1, 0x1, 0x2), x16ToColor(0x2, 0x3, 0x4), x16ToColor(0x3, 0x5, 0x6), x16ToColor(0x4, 0x7, 0x8), x16ToColor(0x5, 0x9, 0xA),
    // ROW 16
    x16ToColor(0x6, 0xB, 0xC), x16ToColor(0x7, 0xD, 0xF), x16ToColor(0x0, 0x1, 0x2), x16ToColor(0x1, 0x3, 0x4), x16ToColor(0x1, 0x5, 0x6), x16ToColor(0x2, 0x6, 0x8), x16ToColor(0x2, 0x8, 0xA), x16ToColor(0x3, 0xA, 0xC), x16ToColor(0x3, 0xC, 0xF), x16ToColor(0x0, 0x1, 0x2), x16ToColor(0x0, 0x3, 0x4), x16ToColor(0x0, 0x4, 0x6), x16ToColor(0x0, 0x6, 0x8), x16ToColor(0x0, 0x8, 0xA), x16ToColor(0x0, 0x9, 0xC), x16ToColor(0x0, 0xB, 0xF),
];
