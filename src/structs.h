#ifndef STRUCTS_H
#define STRUCTS_H

typedef struct {
    int pixels;
    int pixels_size;
} Tile;

typedef Color Palette[256];

#define X16_COLOR(r, g, b) { r * 0x11, g * 0x11, b * 0x11, 0xFF }
Palette default_palette = {
    // ROW 1
    X16_COLOR(0x0, 0x0, 0x0), X16_COLOR(0xF, 0xF, 0xF), X16_COLOR(0x8, 0x0, 0x0), X16_COLOR(0xA, 0xE, 0xF), X16_COLOR(0xC, 0xC, 0x4), X16_COLOR(0x0, 0x5, 0xC), X16_COLOR(0x0, 0xA, 0x0), X16_COLOR(0xE, 0x7, 0xE), X16_COLOR(0xD, 0x5, 0x8), X16_COLOR(0x6, 0x0, 0x4), X16_COLOR(0xF, 0x7, 0x7), X16_COLOR(0x3, 0x3, 0x3), X16_COLOR(0x7, 0x7, 0x7), X16_COLOR(0xA, 0x6, 0xF), X16_COLOR(0x0, 0xF, 0x8), X16_COLOR(0xB, 0xB, 0xB),
    // ROW 2
    X16_COLOR(0x0, 0x0, 0x0), X16_COLOR(0x1, 0x1, 0x1), X16_COLOR(0x2, 0x2, 0x2), X16_COLOR(0x3, 0x3, 0x3), X16_COLOR(0x4, 0x4, 0x4), X16_COLOR(0x5, 0x5, 0x5), X16_COLOR(0x6, 0x6, 0x6), X16_COLOR(0x7, 0x7, 0x7), X16_COLOR(0x8, 0x8, 0x8), X16_COLOR(0x9, 0x9, 0x9), X16_COLOR(0xA, 0xA, 0xA), X16_COLOR(0xB, 0xB, 0xB), X16_COLOR(0xC, 0xC, 0xC), X16_COLOR(0xD, 0xD, 0xD), X16_COLOR(0xE, 0xE, 0xE), X16_COLOR(0xF, 0xF, 0xF),
    // ROW 3
    X16_COLOR(0x2, 0x1, 0x1), X16_COLOR(0x4, 0x3, 0x3), X16_COLOR(0x6, 0x4, 0x4), X16_COLOR(0x8, 0x6, 0x6), X16_COLOR(0xA, 0x8, 0x8), X16_COLOR(0xC, 0x9, 0x9), X16_COLOR(0xF, 0xB, 0xB), X16_COLOR(0x2, 0x1, 0x1), X16_COLOR(0x4, 0x2, 0x2), X16_COLOR(0x6, 0x3, 0x3), X16_COLOR(0x8, 0x4, 0x4), X16_COLOR(0xA, 0x5, 0x5), X16_COLOR(0xC, 0x6, 0x6), X16_COLOR(0xF, 0x7, 0x7), X16_COLOR(0x2, 0x0, 0x0), X16_COLOR(0x4, 0x1, 0x1),
    // ROW 4
    X16_COLOR(0x6, 0x1, 0x1), X16_COLOR(0x8, 0x2, 0x2), X16_COLOR(0xA, 0x2, 0x2), X16_COLOR(0xC, 0x3, 0x3), X16_COLOR(0xF, 0x3, 0x3), X16_COLOR(0x2, 0x0, 0x0), X16_COLOR(0x4, 0x0, 0x0), X16_COLOR(0x6, 0x0, 0x0), X16_COLOR(0x8, 0x0, 0x0), X16_COLOR(0xA, 0x0, 0x0), X16_COLOR(0xC, 0x0, 0x0), X16_COLOR(0xF, 0x0, 0x0), X16_COLOR(0x2, 0x1, 0x2), X16_COLOR(0x4, 0x3, 0x4), X16_COLOR(0x6, 0x4, 0x6), X16_COLOR(0x8, 0x6, 0x8),
    // ROW 5
    X16_COLOR(0xA, 0x8, 0xA), X16_COLOR(0xC, 0x9, 0xC), X16_COLOR(0xF, 0xB, 0xE), X16_COLOR(0x2, 0x1, 0x1), X16_COLOR(0x4, 0x2, 0x3), X16_COLOR(0x6, 0x3, 0x5), X16_COLOR(0x8, 0x4, 0x7), X16_COLOR(0xA, 0x5, 0x9), X16_COLOR(0xC, 0x6, 0xB), X16_COLOR(0xF, 0x7, 0xD), X16_COLOR(0x2, 0x0, 0x1), X16_COLOR(0x4, 0x1, 0x3), X16_COLOR(0x6, 0x1, 0x5), X16_COLOR(0x8, 0x2, 0x6), X16_COLOR(0xA, 0x2, 0x8), X16_COLOR(0xC, 0x3, 0xA),
    // ROW 6
    X16_COLOR(0xF, 0x3, 0xC), X16_COLOR(0x2, 0x0, 0x1), X16_COLOR(0x4, 0x0, 0x3), X16_COLOR(0x6, 0x0, 0x4), X16_COLOR(0x8, 0x0, 0x6), X16_COLOR(0xA, 0x0, 0x8), X16_COLOR(0xC, 0x0, 0x9), X16_COLOR(0xF, 0x0, 0xB), X16_COLOR(0x1, 0x1, 0x2), X16_COLOR(0x3, 0x3, 0x4), X16_COLOR(0x5, 0x4, 0x6), X16_COLOR(0x7, 0x6, 0x8), X16_COLOR(0x9, 0x8, 0xA), X16_COLOR(0xB, 0x9, 0xC), X16_COLOR(0xD, 0xB, 0xF), X16_COLOR(0x1, 0x1, 0x2),
    // ROW 7
    X16_COLOR(0x3, 0x2, 0x4), X16_COLOR(0x4, 0x3, 0x6), X16_COLOR(0x6, 0x4, 0x8), X16_COLOR(0x8, 0x5, 0xA), X16_COLOR(0x9, 0x6, 0xC), X16_COLOR(0xB, 0x7, 0xF), X16_COLOR(0x1, 0x0, 0x2), X16_COLOR(0x2, 0x1, 0x4), X16_COLOR(0x4, 0x1, 0x6), X16_COLOR(0x5, 0x2, 0x8), X16_COLOR(0x6, 0x2, 0xA), X16_COLOR(0x8, 0x3, 0xC), X16_COLOR(0x9, 0x3, 0xF), X16_COLOR(0x1, 0x0, 0x2), X16_COLOR(0x2, 0x0, 0x4), X16_COLOR(0x3, 0x0, 0x6),
    // ROW 8
    X16_COLOR(0x4, 0x0, 0x8), X16_COLOR(0x5, 0x0, 0xA), X16_COLOR(0x6, 0x0, 0xC), X16_COLOR(0x7, 0x0, 0xF), X16_COLOR(0x1, 0x1, 0x2), X16_COLOR(0x3, 0x3, 0x4), X16_COLOR(0x4, 0x5, 0x6), X16_COLOR(0x6, 0x6, 0x8), X16_COLOR(0x8, 0x8, 0xA), X16_COLOR(0x9, 0xA, 0xC), X16_COLOR(0xB, 0xC, 0xF), X16_COLOR(0x1, 0x1, 0x2), X16_COLOR(0x2, 0x2, 0x4), X16_COLOR(0x3, 0x4, 0x6), X16_COLOR(0x4, 0x5, 0x8), X16_COLOR(0x5, 0x6, 0xA),
    // ROW 9
    X16_COLOR(0x6, 0x8, 0xC), X16_COLOR(0x7, 0x9, 0xF), X16_COLOR(0x0, 0x0, 0x2), X16_COLOR(0x1, 0x1, 0x4), X16_COLOR(0x1, 0x2, 0x6), X16_COLOR(0x2, 0x3, 0x8), X16_COLOR(0x2, 0x4, 0xA), X16_COLOR(0x3, 0x5, 0xC), X16_COLOR(0x3, 0x6, 0xF), X16_COLOR(0x0, 0x0, 0x2), X16_COLOR(0x0, 0x1, 0x4), X16_COLOR(0x0, 0x1, 0x6), X16_COLOR(0x0, 0x2, 0x8), X16_COLOR(0x0, 0x2, 0xA), X16_COLOR(0x0, 0x3, 0xC), X16_COLOR(0x0, 0x3, 0xF),
    // ROW 10
    X16_COLOR(0x1, 0x2, 0x2), X16_COLOR(0x3, 0x4, 0x4), X16_COLOR(0x4, 0x6, 0x6), X16_COLOR(0x6, 0x8, 0x8), X16_COLOR(0x8, 0xA, 0xA), X16_COLOR(0x9, 0xC, 0xC), X16_COLOR(0xB, 0xF, 0xF), X16_COLOR(0x1, 0x2, 0x2), X16_COLOR(0x2, 0x4, 0x4), X16_COLOR(0x3, 0x6, 0x6), X16_COLOR(0x4, 0x8, 0x8), X16_COLOR(0x5, 0xA, 0xA), X16_COLOR(0x6, 0xC, 0xC), X16_COLOR(0x7, 0xF, 0xF), X16_COLOR(0x0, 0x2, 0x2), X16_COLOR(0x1, 0x4, 0x4),
    // ROW 11
    X16_COLOR(0x1, 0x6, 0x6), X16_COLOR(0x2, 0x8, 0x8), X16_COLOR(0x2, 0xA, 0xA), X16_COLOR(0x3, 0xC, 0xC), X16_COLOR(0x3, 0xF, 0xF), X16_COLOR(0x0, 0x2, 0x2), X16_COLOR(0x0, 0x4, 0x4), X16_COLOR(0x0, 0x6, 0x6), X16_COLOR(0x0, 0x8, 0x8), X16_COLOR(0x0, 0xA, 0xA), X16_COLOR(0x0, 0xC, 0xC), X16_COLOR(0x0, 0xF, 0xF), X16_COLOR(0x1, 0x2, 0x1), X16_COLOR(0x3, 0x4, 0x3), X16_COLOR(0x4, 0x6, 0x5), X16_COLOR(0x6, 0x8, 0x6),
    // ROW 12
    X16_COLOR(0x8, 0xA, 0x8), X16_COLOR(0x9, 0xC, 0xA), X16_COLOR(0xB, 0xF, 0xC), X16_COLOR(0x1, 0x2, 0x1), X16_COLOR(0x2, 0x4, 0x2), X16_COLOR(0x3, 0x6, 0x4), X16_COLOR(0x4, 0x8, 0x5), X16_COLOR(0x5, 0xA, 0x6), X16_COLOR(0x6, 0xC, 0x8), X16_COLOR(0x7, 0xF, 0x9), X16_COLOR(0x0, 0x2, 0x0), X16_COLOR(0x1, 0x4, 0x1), X16_COLOR(0x1, 0x6, 0x2), X16_COLOR(0x2, 0x8, 0x3), X16_COLOR(0x2, 0xA, 0x4), X16_COLOR(0x3, 0xC, 0x5),
    // ROW 13
    X16_COLOR(0x3, 0xF, 0x6), X16_COLOR(0x0, 0x2, 0x0), X16_COLOR(0x0, 0x4, 0x1), X16_COLOR(0x0, 0x6, 0x1), X16_COLOR(0x0, 0x8, 0x2), X16_COLOR(0x0, 0xA, 0x2), X16_COLOR(0x0, 0xC, 0x3), X16_COLOR(0x0, 0xF, 0x3), X16_COLOR(0x1, 0x2, 0x1), X16_COLOR(0x3, 0x4, 0x3), X16_COLOR(0x5, 0x6, 0x4), X16_COLOR(0x7, 0x8, 0x6), X16_COLOR(0x9, 0xA, 0x8), X16_COLOR(0xB, 0xC, 0x9), X16_COLOR(0xD, 0xF, 0xB), X16_COLOR(0x1, 0x2, 0x1),
    // ROW 14
    X16_COLOR(0x3, 0x4, 0x2), X16_COLOR(0x4, 0x6, 0x3), X16_COLOR(0x6, 0x8, 0x4), X16_COLOR(0x8, 0xA, 0x5), X16_COLOR(0x9, 0xC, 0x6), X16_COLOR(0xB, 0xF, 0x7), X16_COLOR(0x1, 0x2, 0x0), X16_COLOR(0x2, 0x4, 0x1), X16_COLOR(0x4, 0x6, 0x1), X16_COLOR(0x5, 0x8, 0x2), X16_COLOR(0x6, 0xA, 0x2), X16_COLOR(0x8, 0xC, 0x3), X16_COLOR(0x9, 0xF, 0x3), X16_COLOR(0x1, 0x2, 0x0), X16_COLOR(0x2, 0x4, 0x0), X16_COLOR(0x3, 0x6, 0x0),
    // ROW 15
    X16_COLOR(0x4, 0x8, 0x0), X16_COLOR(0x5, 0xA, 0x0), X16_COLOR(0x6, 0xC, 0x0), X16_COLOR(0x7, 0xF, 0x0), X16_COLOR(0x2, 0x2, 0x1), X16_COLOR(0x4, 0x4, 0x3), X16_COLOR(0x6, 0x6, 0x4), X16_COLOR(0x8, 0x8, 0x6), X16_COLOR(0xA, 0xA, 0x8), X16_COLOR(0xC, 0xC, 0x9), X16_COLOR(0xF, 0xE, 0xB), X16_COLOR(0x2, 0x1, 0x1), X16_COLOR(0x4, 0x3, 0x2), X16_COLOR(0x6, 0x5, 0x3), X16_COLOR(0x8, 0x7, 0x4), X16_COLOR(0xA, 0x9, 0x5),
    // ROW 16
    X16_COLOR(0xC, 0xB, 0x6), X16_COLOR(0xF, 0xD, 0x7), X16_COLOR(0x2, 0x1, 0x0), X16_COLOR(0x4, 0x3, 0x1), X16_COLOR(0x6, 0x5, 0x1), X16_COLOR(0x8, 0x6, 0x2), X16_COLOR(0xA, 0x8, 0x2), X16_COLOR(0xC, 0xA, 0x3), X16_COLOR(0xF, 0xC, 0x3), X16_COLOR(0x2, 0x1, 0x0), X16_COLOR(0x4, 0x3, 0x0), X16_COLOR(0x6, 0x4, 0x0), X16_COLOR(0x8, 0x6, 0x0), X16_COLOR(0xA, 0x8, 0x0), X16_COLOR(0xC, 0x9, 0x0), X16_COLOR(0xF, 0xB, 0x0),
};
#undef X16_COLOR

#endif
